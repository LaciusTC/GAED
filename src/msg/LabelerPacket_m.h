//
// Generated file, do not edit! Created by nedtool 5.6 from msg/LabelerPacket.msg.
//

#ifndef __INET_LABELERPACKET_M_H
#define __INET_LABELERPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class LabelerPacket;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address


namespace inet {

/**
 * Enum generated from <tt>msg/LabelerPacket.msg:21</tt> by nedtool.
 * <pre>
 * enum LabelerPacketType
 * {
 *     REQ = 10;
 *     OTHER = 11;
 * }
 * </pre>
 */
enum LabelerPacketType {
    REQ = 10,
    OTHER = 11
};

/**
 * Enum generated from <tt>msg/LabelerPacket.msg:26</tt> by nedtool.
 * <pre>
 * enum NodeStatus
 * {
 *     UNKNOWN = 0;
 *     LABELED = 1;
 *     UNLABELED = 2;
 * }
 * </pre>
 */
enum NodeStatus {
    UNKNOWN = 0,
    LABELED = 1,
    UNLABELED = 2
};

/**
 * Class generated from <tt>msg/LabelerPacket.msg:34</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class LabelerPacket extends FieldsChunk
 * {
 *     L3Address src;
 *     L3Address dest;
 *     LabelerPacketType type;
 *     NodeStatus status;
 *     long seqNumber;
 *     long ttl;
 *     chunkLength = B(56); //Longitud en bytes del mensaje.
 * }
 * </pre>
 */
class LabelerPacket : public ::inet::FieldsChunk
{
  protected:
    L3Address src;
    L3Address dest;
    inet::LabelerPacketType type = static_cast<inet::LabelerPacketType>(-1);
    inet::NodeStatus status = static_cast<inet::NodeStatus>(-1);
    long seqNumber = 0;
    long ttl = 0;

  private:
    void copy(const LabelerPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LabelerPacket&);

  public:
    LabelerPacket();
    LabelerPacket(const LabelerPacket& other);
    virtual ~LabelerPacket();
    LabelerPacket& operator=(const LabelerPacket& other);
    virtual LabelerPacket *dup() const override {return new LabelerPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const L3Address& getSrc() const;
    virtual L3Address& getSrcForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<LabelerPacket*>(this)->getSrc());}
    virtual void setSrc(const L3Address& src);
    virtual const L3Address& getDest() const;
    virtual L3Address& getDestForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<LabelerPacket*>(this)->getDest());}
    virtual void setDest(const L3Address& dest);
    virtual inet::LabelerPacketType getType() const;
    virtual void setType(inet::LabelerPacketType type);
    virtual inet::NodeStatus getStatus() const;
    virtual void setStatus(inet::NodeStatus status);
    virtual long getSeqNumber() const;
    virtual void setSeqNumber(long seqNumber);
    virtual long getTtl() const;
    virtual void setTtl(long ttl);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LabelerPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LabelerPacket& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_LABELERPACKET_M_H

