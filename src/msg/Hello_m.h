//
// Generated file, do not edit! Created by nedtool 5.6 from Hello.msg.
//

#ifndef __INET_HELLO_M_H
#define __INET_HELLO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class Hello;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress


namespace inet {

/**
 * Enum generated from <tt>Hello.msg:22</tt> by nedtool.
 * <pre>
 * enum NodeStatus
 * {
 *     UNLABELED = 0;
 *     LABELED = 1;
 * }
 * </pre>
 */
enum NodeStatus {
    UNLABELED = 0,
    LABELED = 1
};

/**
 * Enum generated from <tt>Hello.msg:27</tt> by nedtool.
 * <pre>
 * enum HelloMessageType
 * {
 *     REQ = 10;
 *     REP = 11;
 * }
 * </pre>
 */
enum HelloMessageType {
    REQ = 10,
    REP = 11
};

/**
 * Class generated from <tt>Hello.msg:34</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class Hello extends FieldsChunk
 * {
 *     string label[20];
 *     HelloMessageType type;
 *     NodeStatus status;
 *     MacAddress srcMacAddress;
 *     MacAddress destMacAddress;
 *     double x;    // Position x
 *     double y;    // Position y
 *     chunkLength = B(54); //Longitud en bytes del mensaje.
 * }
 * </pre>
 */
class Hello : public ::inet::FieldsChunk
{
  protected:
    omnetpp::opp_string label[20];
    inet::HelloMessageType type = static_cast<inet::HelloMessageType>(-1);
    inet::NodeStatus status = static_cast<inet::NodeStatus>(-1);
    MacAddress srcMacAddress;
    MacAddress destMacAddress;
    double x = 0;
    double y = 0;

  private:
    void copy(const Hello& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Hello&);

  public:
    Hello();
    Hello(const Hello& other);
    virtual ~Hello();
    Hello& operator=(const Hello& other);
    virtual Hello *dup() const override {return new Hello(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual size_t getLabelArraySize() const;
    virtual const char * getLabel(size_t k) const;
    virtual void setLabel(size_t k, const char * label);
    virtual inet::HelloMessageType getType() const;
    virtual void setType(inet::HelloMessageType type);
    virtual inet::NodeStatus getStatus() const;
    virtual void setStatus(inet::NodeStatus status);
    virtual const MacAddress& getSrcMacAddress() const;
    virtual MacAddress& getSrcMacAddressForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<Hello*>(this)->getSrcMacAddress());}
    virtual void setSrcMacAddress(const MacAddress& srcMacAddress);
    virtual const MacAddress& getDestMacAddress() const;
    virtual MacAddress& getDestMacAddressForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<Hello*>(this)->getDestMacAddress());}
    virtual void setDestMacAddress(const MacAddress& destMacAddress);
    virtual double getX() const;
    virtual void setX(double x);
    virtual double getY() const;
    virtual void setY(double y);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Hello& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Hello& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_HELLO_M_H

